Some points to remember:
	
	☐	use the following to get runtime duration of exectution and memory details.
		/usr/bin/time -v ./runfile < input.txt > output.txt
	☐	to change tab of terminal click alt + tab_number
	☐	to center cursor line press zz in normal mode
	☐	update imput file
		pbpaste > input.txt 
	☐	see output file
		cat output.txt
	☐	copy code to clipboard
		pbcopy < output.txt
	☐	transfer precompiled header file
		sudo cp stdc++.h.gch ~/Documents/cp/contest/bits/

Empty files from Terminal:
	
	☐	cat /dev/null > file
	☐	cat /dev/null > *.txt && cat /dev/null > *.cpp

Packages I use on VIM for cp:

	☐	:%!astyle --indent=force-tab=4 -xe -xj -A2 -y -xg -p -xd -xb -Y (to format vim cpp code)
	☐	:%!js-beautify --indent_size=4 --indent_char='\t' (for javascript formatting)
	☐	:call Sing() (to generate template)
	☐	:TemplateExpand (to expand template and set time and date)
	☐	:args *.cpp | :tab all (to set all arguments and to open all files in new tabs)

My sublime build:
	☐	{                                                                                                                                                                                                                              	
     	    "cmd": ["g++ -std=c++20 -Wall -Wextra -O2 -pthread -H -I . \"${file}\" -o runfile  && timeout 1.5s /usr/bin/time -v ./runfile <input.txt> output.txt && rm runfile"], 
     	    // above line works fine if input.txt and output.txt files are present in same directory in which .cpp file is present else add complete address of these files for using them as common input output files in your system.
     	    // have used this to compile headers at /usr/include/x86_64-linux-gnu/c++/11/bits/
     	    // sudo g++ -std=c++20 -Wall -Wextra -O2 -o bits -pthread stdc++.h
			// sometimes after compiling the header, we get a new bits file. Rename it as stdc++.h.gch and keep it in the bits folder of the contest folder.
			// only one file stdc++.h.gch lives in bits folder
     	    "shell":true,
     	    "working_dir":"$file_path",
     	    "selector":"source.c,source.c++,source.cpp",
     	}

Recursive function:
	☐	function <int (int, int)> f = [&] (int l, int r) -> int {
